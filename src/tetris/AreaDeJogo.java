package tetris;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Random;
import javax.swing.JPanel;

/**
 *
 * @author Davi Campolina
 */
public class AreaDeJogo extends JPanel {
    
    private Integer linhas;
    private Integer coluna;
    private Integer tamanhoCelula;
    private int[][] bloco = {{1,0}, {1,0}, {1,1}}; 

    /**
     * Creates new form AreaDeJogo
     * @param placeholder
     */
    public AreaDeJogo(JPanel placeholder, Integer colunas) {
        
        initComponents();
        placeholder.setVisible(Boolean.FALSE);
        this.setBounds(placeholder.getBounds());
        this.setBackground(placeholder.getBackground());
        this.setBorder(placeholder.getBorder());
        
        coluna = Integer.valueOf(colunas.intValue());
        tamanhoCelula = Integer.valueOf(this.getBounds().width) / colunas.intValue();
        linhas = this.getBounds().height / tamanhoCelula.intValue();
        
    }
    
    private void desenhaBloco (Graphics g) {
        
        Color cor = this.corAleatoria();
        
        for (int i = 0; i < bloco.length; i++) {
            
            for (int j = 0; j < bloco[0].length; j++) {
                
                if (bloco[i][j] == 1){ 
                    
                    g.setColor(cor);
                    g.fillRect(j * tamanhoCelula.intValue(), i * tamanhoCelula.intValue(), tamanhoCelula.intValue(), tamanhoCelula.intValue());
                    g.setColor(Color.BLACK);
                    g.drawRect(j * tamanhoCelula.intValue(), i * tamanhoCelula.intValue(), tamanhoCelula.intValue(), tamanhoCelula.intValue());
                    
                }
                
            }
            
        }
        
    }
    
    private Color corAleatoria () {
        
        Random aleatorio = new Random();
        String r = "" + Math.round((aleatorio.nextDouble() * (255 - 0 + 1) + 0));
        String g = "" + Math.round((aleatorio.nextDouble() * (255 - 0 + 1) + 0));
        String b = "" + Math.round((aleatorio.nextDouble() * (255 - 0 + 1) + 0));
        
        Color cor = new Color(Integer.valueOf(r), Integer.valueOf(g), Integer.valueOf(b));
        return cor;
        
    }
    
    @Override
    protected void paintComponent (Graphics g) {
        
        super.paintComponent(g);
        this.desenhaBloco(g);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
